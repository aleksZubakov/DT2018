\import lect07
\open Nat

-- 1. Реализуйте любой алгоритм сортировки, используя with для паттерн матчинга на результате сравнения элементов списка.
\func insert {A : \Type} (comparator : A -> A -> Bool) (x : A) (xs : List A) : List A \elim xs
  | nil => cons x nil
  | cons x' xs => \case (comparator x x') \with {
    | true => cons x (cons x' xs)
    | false => cons x' (insert comparator x xs)
  }

\func sort {A : \Type} (comparator : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => insert comparator x (sort comparator xs)


-- 2. Определите filter через if, а не через with.
--    Докажите для этой версии filter лемму filter-lem.
\func if {A : \Type} (b : Bool) (t e : A) : A \elim b
    | true => t
    | false => e

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
    | cons x xs => if (p x) (cons x (filter' p xs)) (filter' p xs)
    | nil => nil

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) <= length xs \elim xs
  | nil => unit
  | cons x xs => \case p x \as b \return (length {A} (if b (cons x (filter' p xs)) (filter' p xs)) <= suc (length xs))  \with {
    | true => filter-lem p xs
    | false => <=-helper (filter-lem p xs)
}

-- 3. Докажите, что если равенство элементов A разрешимо, то и равенство элементов List A тоже разрешимо.

\func head {A : \Type} (xs : List A) (empty : A) : A \elim xs
    | nil => empty
    | cons x _ => x

\func tail {A : \Type} (xs : List A) : List A
    | nil => nil
    | cons _ xs => xs


\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
    | decideEq => decideEq dec
    \where
        \func decideEq {A : \Type} (dec : Eq A) (xs ys : List A) : Decide (xs = ys) \elim xs, ys
            | nil, nil => yes idp
            | nil, cons _ _ => no (\lam p => suc/=0 (sym (pmap length p)))
            | cons _ _, nil => no (\lam p => suc/=0 (pmap length p))
            | cons x xs, cons y ys => \case dec.decideEq x y, decideEq dec xs ys \with {
                | yes pn, yes pl => yes (pmap (\lam z => cons z xs) pn *> pmap (cons y) pl)
                | no pn, _ => no (\lam p => pn (pmap (\lam zs => head zs x) p))
                | _, no pl => no (\lam p => pl (pmap tail p))
                }

-- 4. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven/=odd {n k : Nat} (p : 2 * n = suc (2 * k)) : Empty \elim n, k
    | 0, 0 => absurd ((\lam p => suc/=0 (sym p)) p)
    | 0, suc _ => absurd ((\lam p => suc/=0 (sym p)) p)
    | suc _, 0 => absurd (suc/=0 (pmap pred p))
    | suc x, suc y => absurd (isEven/=odd {x} {y} (pmap pred (pmap pred p)))


\func isEven-dec : DecPred isEven => \lam n =>
    \case parity n \with {
        | even k p => yes (k, p)
        | odd k p => no (\lam x => isEven/=odd (trans (sym x.2) p))
      }


-- 5. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст, либо состоит из повторений одного элемента, либо в A существует два различных элемента.
\func trans {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a''
    => transport (\lam x => a = x) q p

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) (dec : DecEq A) : Result A xs \elim xs
    | nil => empty idp
    | cons x xs => \case lemma xs dec \with {
      | empty p => repeated 1 x (pmap (cons x) p)
      | repeated n a ps => \case dec a x \with {
        | yes p' => repeated (suc n) a (trans (sym (pmap (\lam x => cons x xs) p')) (pmap (cons a) ps))
        | no p' => A-is-not-trivial a x (\lam p => p' p)
      }
      | A-is-not-trivial a a' p => A-is-not-trivial a a' p
}

-- 6. Определите view, представляющий число в виде частного и остатка от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : T (r < m)) (p : n = q * m + r)

\func \infixr 5 *> {A : \Type} {a a' a'' : A} (p : a = a') (q : a' = a'') : a = a'' => transport (\lam x => a = x) q p

\func \infixr 5 <* {A : \Type} {a' a'' a : A} (q : a' = a) (p : a' = a'') : a = a'' => transport (\lam x => x = a'') q p

\func +-assoc (n m k : Nat) : (n + m) + k = n + (m + k) \elim k
  | 0 => idp
  | suc k => pmap suc (+-assoc n m k)

\func +-comm (n m : Nat) : n + m = m + n
  | 0, 0 => idp
  | 0, suc m => pmap suc (+-comm 0 m)
  | suc n, 0 => pmap suc (+-comm n 0)
  | suc n, suc m => pmap suc (+-comm (suc n) m *> pmap suc (sym (+-comm n m)) *> +-comm n (suc m))

\func lemma1 (n : Nat) : 1 * n = n \elim n
  | 0 => idp
  | suc n => \let a => lemma1 n \in pmap suc a

\func lemma2 (n : Nat) : 0 * n = 0 \elim n
  | 0 => idp
  | suc n => lemma2 n

\func lemma3 (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n => pmap (\lam x => x + (m + k)) (lemma3 n m k)
    *> +-assoc (m * n) (k * n) (m + k)
    *> pmap (\lam x => (m * n) + x) (sym (+-assoc (k * n) m k))
    *> pmap (\lam x => m * n + (x + k)) (+-comm (k * n) m)
    *> pmap (\lam x => (m * n) + x) (+-assoc m (k * n) k)
    *> sym (+-assoc (m * n) m (k * n + k))

\func lemma4 (q m r : Nat) (p : r = m) : q * m + r = suc q * m \elim r
  | suc r => sym (lemma3 m q 1 *> pmap (\lam x => q * m + x) (lemma1 m *> sym p))
  | 0 => pmap (\lam x => q * x) (sym p) *> sym (pmap (\lam x => suc q * x) (sym p))

\func lemma5 (n : Nat) (t : T (0 < suc n)) (p : 1 = suc n -> Empty) : T (1 < suc n) \elim n
  | suc n => t
  | 0 => absurd (p idp)

\func lemma6 (r m : Nat) (t : T (r < m)) (p : suc r = m -> Empty) : T (suc r < m) \elim r, m
  | 0, 0 => t
  | 0, suc m => lemma5 m t p
  | suc r, 0 => t
  | suc r, suc m => lemma6 r m t (\lam p' => p (pmap suc p'))

\func mod-view (m n : Nat) (t : T (0 < m)) : ModView m n \elim m, n
  | m, 0 => quot-rem 0 0 t (sym (lemma2 m))
  | m, suc n => \case mod-view m n t \with {
    | quot-rem q r t' p => \let r' => suc r \in \case NatEq.decideEq r' m \with {
      | yes p' => quot-rem (suc q) 0 t (pmap suc p *> lemma4 q m r' p')
      | no p' => quot-rem q (suc r) (lemma6 r m t' p') (pmap suc p)
    }
  }

\func div (n m : Nat) (t : T (0 < m)) : Nat => \case mod-view m n t \with { | quot-rem q _ _ _ => q }

-- 7. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => {?}

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func \infix 4 <-> {A : \Type} (P Q : A -> \Type) => \Pi (x : A) -> \Sigma (P x -> Q x) (Q x -> P x)

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : (FromBoolToDec (FromDecToBool P)).1 <-> P.1 => {?}
