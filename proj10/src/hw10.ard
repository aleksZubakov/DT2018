\import lect10

-- 1. Определите функцию sscanf.

-- 2. Определите тип бинарных сортированных деревьев.
--    То есть таких деревьев, в которых для любого узла верно, что все элементы в левом поддереве меньше либо равны, чем значение в узле, которое меньше либо равно, чем все элементы в правом поддереве.

\data Tree (A : Poset) : \Type
  | leaf (x : A)
  | node (x : A) (left right : Tree A) (Less left x) (More x right)

-- Неправильно. Нужно, чтобы все элементы в левом поддереве были меньше либо равны, а не только вершина.

-- Ну давайте вот так попробуем:

--\data Left {A : Poset} (tree : Tree A) (x : A) : \Type \elim tree
--  | leaf => Lnill
--  | node x' _ _ _ _ => nodeL (x' <= {A} x)

--\data Less {A : Poset} (tree : Tree A) (x : A) : \Type \elim tree
--  | leaf => Lnill
--  | node x' left right _ _ => nodeL (x' <= {A} x) (Less left x) (Less right x)

\data Less {A : Poset} (tree : Tree A) (x : A) : \Type \elim tree
  | leaf x' => Lnill (x' <= x)
  | node _ l _ _ _ => nodeL (Max l <= x)

--\data More {A : Poset} (x : A)  (tree : Tree A) : \Type \elim tree
--  | leaf => Rnill
--  | node x' left right _ _ => nodeR (x <= {A} x') (More x left) (More x right)

\data More {A : Poset} (x : A)  (tree : Tree A) : \Type \elim tree
  | leaf x' => Rnill (x <= x')
  | node _ _ r _ _ => nodeR (x <= Min r)

\func Min {A : Poset} (tree : Tree A) : A
  | leaf x => x
  | node _ l _ _ _ => Min l

\func Max {A : Poset} (tree : Tree A) : A
  | leaf x => x
  | node _ _ r _ _ => Max r


-- 3. Реализуйте функцию сортировки, возвращающую SortedList.

\func sort {A : TotalPoset} (xs : List A) : SortedList A => {?}

-- 4. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условияЖ
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs
--
