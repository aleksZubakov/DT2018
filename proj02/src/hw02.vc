\import lect02 \hiding (+,*)
\open Nat -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.
\func if {T : \Type} (cond : Bool) (body else : T): T \elim cond
    | true => body
    | false => else
-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat): Nat \elim y
    | 0 => 1
    | 1 => x
    | suc y => x ^ y * x

\func fac (x : Nat): Nat \elim x
    | 0 => 0
    | 1 => 1
    | suc x => suc x * fac x

\func test1 : 3 ^ 3 = 27 => idp
\func test2 : 1 ^ 3 = 1 => idp
\func test3 : 0 ^ 3 = 0 => idp

\func facTest3 : fac 3 = 6 => idp
\func facTest4 : fac 5 = 120 => idp
\func facTest5 : fac 6 = 720 => idp

-- 4. Определите mod и gcd.

\func mod (x y : Nat) : Nat => x - (div x y) * y

\func gcd (x y : Nat): Nat => if (x < y) (gcd' x (mod y x) x) (gcd' y (mod x y) y) \where
     \func gcd' (x y s : Nat) : Nat \elim y, s
         | _, 0 => 0
         | 0, _ => x
         | y, suc s => gcd' y (mod x y) s


\func gcd1 : gcd 1 0 = 0 => idp
\func gcd2 : gcd 0 0 = 0 => idp
\func gcd3 : gcd 0 0 = 0 => idp
\func gcd4 : gcd 25 15 = 5 => idp
\func gcd5 : gcd 21 7 = 7 => idp
\func gcd6 : gcd 17 85 = 17 => idp

-- 5. Определите (полиморфный) reverse для списков.
\func reverse {A : \Type} (list : List A) : List A
    | nil => nil
    | cons x xs => (cons x nil) ++ (reverse xs)

\func reverse1 : reverse (cons 3 (cons 1 nil)) = (cons 1 (cons 3 nil)) => idp
\func reverse2 : reverse (cons 1 (cons 3 (cons 2 nil))) = (cons 2 (cons 3 (cons 1 nil))) => idp
\func reverse3 : reverse {Int} (nil) = (nil) => idp

-- 6. Реализуйте любой алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.
\func len {A : \Type} (l : List A) : Nat
            | nil => 0
            | cons x xs => 1 + len xs -- лучше len xs + 1, что эквивалентно suc (len xs).

\func sort {A : \Type } (l : List A) (f : A -> A -> Bool) : List A => sort' l f  (len l)
  \where {
     \func sort' {A : \Type } (l : List A)  (f : A -> A -> Bool) (i : Nat) : List A \elim i
         | 0  => l
         | suc i => sort' (sort'' l f) f i
-- \where -- так получается двойной уровень вложенности. Зачем?
    \func sort'' {A : \Type} (list : List A) (f : A -> A -> Bool) : List A \elim list
        | cons x (cons y l) => if (f x y) (cons x (sort'' (cons y l) f)) (cons y (sort'' (cons x l) f))
        | cons x nil => cons x nil
        | nil => nil
  }



\func sortTest1 : sort (cons 3 (cons 8 (cons 5 nil))) (<) = cons 3 (cons 5 (cons 8 nil)) => idp
\func sortTest2 : sort (cons 1000000 (cons 3 (cons 3 (cons 192 nil)))) (<) = cons 3 (cons 3 (cons 192 (cons 1000000 nil))) => idp
-- II. Задания на доказательства.

-- 7. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
    | true  => idp
    | false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
    | true  => idp
    | false => idp

-- 8. Докажите, что fac 3 равно 6.

\func proof : (fac 3) = 6 => idp

-- 9. Докажите следующие пропозициональные тавтологии.

\data Either (A B : \Type)
  | inl A
  | inr B

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
    | inl a => f a
    | inr b => g b


-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p _ => g p))

-- 10. Сформулируйте и докажите следующие пропозициональные тавтологии.

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : P -> Q -> R) ( x : \Sigma P Q) : R => f x.1 x.2

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q R : \Type} (f : Either P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P)
        => (\lam p => (f (inl p)).2, \lam q => (f (inr q)).1)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (f : ((((P -> Q) -> P) -> P) -> Q)) :  Q =>
    f (\lam (x' : (P -> Q) -> P) => x' (\lam (x'' : P) => f (\lam (x''' : ((P -> Q) -> P)) => x'')))

-- 11. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (1, h 1)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 12. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> P x -> Q x) (g : \Sigma (x : Nat) (P x)): \Sigma (x : Nat) (Q x)
        => (g.1, h (g.1) (g.2))

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Either (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty
        => \case h 3 \with {
            | inl p => \lam p' _ => p p'
            | inr q => \lam _ => q
            }

-- III. Задания на модули.

-- 13. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTestCorrect : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 14. Чему равно M5.t''' (в нормальной форме)? Докажите это.
\func M5Correct : M5.t''' = ((82, 42, 61, 82, 34, 42, 61, 29), 25, (42, 29)) => idp
